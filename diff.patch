diff --git a/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td b/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
index 41c2cc5080ee..35359b909251 100644
--- a/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
+++ b/llvm/lib/Target/NVPTX/NVPTXIntrinsics.td
@@ -2033,24 +2033,6 @@ multiclass ATOM2N_impl<string OpStr, string IntTypeStr, string TypeStr,
                               # !if(!eq(ScopeStr, "gpu"), "", "_" # ScopeStr)),
                        preds = Preds>;
 }
-<<<<<<< HEAD
-multiclass ATOM3N_impl<string OpStr, string IntTypeStr, string TypeStr,
-                       string ScopeStr, string SpaceStr, string SemStr,
-                       RegTyInfo t, list<Predicate> Preds> {
-  defm "" : F_ATOMIC_3<t,
-                       as_str = !if(!empty(SemStr), "", "." # SemStr)
-                                # !if(!eq(SpaceStr, "gen"), "", "." # SpaceStr),
-                       sem_str = !if(!eq(ScopeStr, "gpu"), "", "." # ScopeStr),
-                       op_str = OpStr # "." # TypeStr,
-                       op = !cast<Intrinsic>(
-                              "int_nvvm_atomic_" # OpStr
-                              # "_" # SpaceStr # "_" # IntTypeStr
-                              # !if(!empty(SemStr), "", "_" # SemStr)
-                              # !if(!eq(ScopeStr, "gpu"), "", "_" # ScopeStr)),
-                       preds = Preds>;
-}
-=======
->>>>>>> 0f1b16dd5f83fd931ecb111bb925ac9e1d56f589
 
 multiclass ATOM2S_impl<string OpStr, string IntTypeStr, string TypeStr,
                        RegTyInfo t, list<Predicate> Preds> {
@@ -2086,16 +2068,6 @@ multiclass ATOM2S_impl<string OpStr, string IntTypeStr, string TypeStr,
   }
 }
 
-<<<<<<< HEAD
-multiclass ATOM3S_impl<string OpStr, string IntTypeStr, string TypeStr,
-                       RegTyInfo t, list<Predicate> Preds> {
-   // No need to define ".gpu"-scoped atomics.  They do the same thing
-   // as the regular, non-scoped atomics defined elsewhere.
-  foreach scope = ["cta", "sys"] in {
-    foreach space = ["gen", "global", "shared"] in {
-      defm _#scope#space : ATOM3N_impl<OpStr, IntTypeStr, TypeStr, scope, space, "",
-                         t, !listconcat(Preds, [hasAtomScope])>;
-=======
 multiclass F_ATOMIC_3_INTRINSIC_PATTERN<RegTyInfo t, string OpStr, string InstructionName> {
   foreach scope = ["cta", "sys"] in {
     foreach space = ["gen"] in {
@@ -2111,29 +2083,6 @@ multiclass F_ATOMIC_3_INTRINSIC_PATTERN<RegTyInfo t, string OpStr, string Instru
 
       def : Pat<(t.Ty (intrinsic addr:$addr, (t.Ty t.ImmNode:$b), (t.Ty t.ImmNode:$c))),
             (!cast<Instruction>(InstructionName # "_ii") ADDR:$addr, (t.Ty t.ImmNode:$b), (t.Ty t.ImmNode:$c), Ordering_not_atomic, !cast<PatLeaf>("Scope_" # scope), !cast<PatLeaf>("AddrSpace_" # space))>;
->>>>>>> 0f1b16dd5f83fd931ecb111bb925ac9e1d56f589
-    }
-  }
-
-  // .gpu scope is default as is "gen" space. Add unscoped intrinsics with
-  // explicit address spaces.
-  foreach scope = ["gpu"] in {
-    foreach space = ["gen", "global", "shared"] in {
-      defm _#scope#space : ATOM3N_impl<OpStr, IntTypeStr, TypeStr, scope, space,
-                         "", t, Preds>;
-    }
-  }
-
-  // Intrinsics with semantics, in all scopes and address spaces. Note the
-  // separate predicates which keep these loops apart.
-  foreach sem = ["acquire", "release", "acq_rel"] in {
-    foreach scope = ["gpu", "cta", "sys"] in {
-      // For now we only need variants for generic space pointers.
-      foreach space = ["gen", "global", "shared"] in {
-        defm _#sem#scope#space :
-            ATOM3N_impl<OpStr, IntTypeStr, TypeStr, scope, space, sem,
-                        t, !listconcat(Preds, [hasAtomScope, hasAtomSemantics])>;
-      }
     }
   }
 }
@@ -2179,17 +2128,12 @@ multiclass ATOM2_incdec_impl<string OpStr> {
 
 // atom.cas
 multiclass ATOM3_cas_impl<string OpStr> {
-<<<<<<< HEAD
-  defm _b16 : ATOM3S_impl<OpStr, "i", "b16", I16RT, []>;
-  defm _b32 : ATOM3S_impl<OpStr, "i", "b32", I32RT, []>;
-  defm _b64 : ATOM3S_impl<OpStr, "i", "b64", I64RT, []>;
-  defm _f32 : ATOM3S_impl<OpStr, "f", "b32", F32RT, []>;
-  defm _f64 : ATOM3S_impl<OpStr, "f", "b64", F64RT, []>;
-=======
   defm _b16 : F_ATOMIC_3_INTRINSIC_PATTERN<I16RT, OpStr, "INT_PTX_ATOM_CAS_16">;
   defm _b32 : F_ATOMIC_3_INTRINSIC_PATTERN<I32RT, OpStr, "INT_PTX_ATOM_CAS_32">;
   defm _b64 : F_ATOMIC_3_INTRINSIC_PATTERN<I64RT, OpStr, "INT_PTX_ATOM_CAS_64">;
->>>>>>> 0f1b16dd5f83fd931ecb111bb925ac9e1d56f589
+// TODO: rewrite these two too:
+  // defm _f32 : ATOM3S_impl<OpStr, "f", "b32", F32RT, []>;
+  // defm _f64 : ATOM3S_impl<OpStr, "f", "b64", F64RT, []>;
 }
 
 defm INT_PTX_SATOM_ADD  : ATOM2_add_impl<"add">;
